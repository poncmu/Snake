
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.Random;
import java.util.TimerTask;

import javax.swing.JPanel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author ASUS G531GT
 */
public class GamePanel extends JPanel implements ActionListener{
    
    static final int SCREEN_WIDTH = 700;
    static final int SCREEN_HEIGHT = 700;
    static final int UNIT_SIZE = 25;
    static final int GAME_UNITS  = (SCREEN_WIDTH*SCREEN_HEIGHT)/UNIT_SIZE;
    static final int DELAY = 75;
    
    final int x[] = new int [GAME_UNITS]; //player
    final int y[] = new int [GAME_UNITS];
    
    final int x1[] = new int [GAME_UNITS]; //bot
    final int y1[] = new int [GAME_UNITS];
    
    int bodyParts = 6;
    int bodyParts1 = 5; //bot
    
    int score = 0;
    
    int appleX;
    int appleY;
    int mushroomX;
    int mushroomY;
    int powerX;
    int powerY;
    
    char direction = 'R';
    boolean running=false;
    Timer timer;
    
    public boolean isMoving=false; //to show state of bot
    public boolean isImmortal=false;
    
    private float startTimer; //time of game
    private float count; //increases startTimer
    private float timePowerup; //time respawn power-up
    private float timeSnake1; //time respawn bot
    private float temp; //counts isMoving
    private float temp1; //counts isImmortal
    
    Random random;
    
    GamePanel(){
        random = new Random();
        this.setPreferredSize(new Dimension(SCREEN_WIDTH,SCREEN_HEIGHT));
        this.setBackground(Color.black);
        this.setFocusable(true);
        this.addKeyListener(new MyKeyAdapter());
        startGame();
    }
    public void startGame(){
        newApple();
        newMushroom();
        
        running = true;
        timer = new Timer(DELAY,this);
        timer.start();
        
        startTimer=30;
        timePowerup=random.nextInt(20)+10;
        timeSnake1=random.nextInt(20)+10;
        
        isMoving = false;
        isImmortal = false;
    }
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        draw(g);
    }
    public void draw(Graphics g){
        if(running){
        g.setColor(Color.white);
        g.fillOval(appleX,appleY,UNIT_SIZE,UNIT_SIZE);
        
        g.setColor(Color.blue);
        g.fillRect(mushroomX, mushroomY,UNIT_SIZE, UNIT_SIZE);
        
        if(timePowerup<0){
        g.setColor(Color.YELLOW);
        g.fillOval(powerX, powerY, UNIT_SIZE, UNIT_SIZE);
        }

        for(int i=0;i<bodyParts;i++){
            if(i==0){
                g.setColor(Color.green);
                g.fillRect(x[i],y[i],UNIT_SIZE,UNIT_SIZE);
            }else{
                g.setColor(new Color(45,180,0));
                g.fillRect(x[i],y[i],UNIT_SIZE,UNIT_SIZE);
            }
        }
        if(isMoving){
            for(int i=0;i<bodyParts1;i++){
                    g.setColor(new Color(random.nextInt(255),random.nextInt(255),random.nextInt(255)));
                    g.fillRect(x1[i],y1[i],UNIT_SIZE,UNIT_SIZE);
            }
        }
        
        g.setColor(Color.red);
        g.setFont(new Font("Ink Free",Font.BOLD,20));
        FontMetrics metrics = getFontMetrics(g.getFont());
        g.drawString("Score : "+score,(SCREEN_WIDTH-metrics.stringWidth("Score : "+score))/2,g.getFont().getSize());
        
        g.setColor(Color.red);
        g.setFont(new Font("Ink Free",Font.BOLD,20));
        FontMetrics metrics1 = getFontMetrics(g.getFont());
        g.drawString("Time : "+startTimer,(SCREEN_WIDTH/2-metrics1.stringWidth("Time : "+startTimer))/2,g.getFont().getSize());
        }
        else
            gameOver(g);
    }
    public void move(){
        for(int i=bodyParts;i>0;i--){
            x[i]=x[i-1];
            y[i]=y[i-1];
        }
        switch(direction){
            case 'U' : y[0]=(int) (y[0]-UNIT_SIZE+count); break;
            case 'D' : y[0]=(int) (y[0]+UNIT_SIZE+count); break;
            case 'L' : x[0]=(int) (x[0]-UNIT_SIZE+count); break;
            case 'R' : x[0]=(int) (x[0]+UNIT_SIZE+count); break;
        }
    } //movement of player
    public void move1(boolean isTrue){
        if(isTrue){
        for(int i=bodyParts1;i>0;i--){
            x1[i]=x1[i-1];
            y1[i]=y1[i-1];
        }
        switch(random.nextInt(4)){
            case 0 : y1[0]=y1[0]-UNIT_SIZE; break;
            case 1 : y1[0]=y1[0]+UNIT_SIZE; break;
            case 2 : x1[0]=x1[0]-UNIT_SIZE; break;
            case 4 : x1[0]=x1[0]+UNIT_SIZE; break;
        }
        }
    } //movement of bot
    public void newApple(){
            appleX = random.nextInt((int)(SCREEN_WIDTH/UNIT_SIZE))*UNIT_SIZE;
            appleY = random.nextInt((int)(SCREEN_HEIGHT/UNIT_SIZE))*UNIT_SIZE;
    }
    public void checkApple(){
        if((x[0]==appleX)&&(y[0]==appleY)){
            bodyParts++;
            score++;
            startTimer+=5f;
            newApple();
        }
    }
    public void newMushroom(){
            mushroomX = random.nextInt((int)(SCREEN_WIDTH/UNIT_SIZE))*UNIT_SIZE;
            mushroomY = random.nextInt((int)(SCREEN_HEIGHT/UNIT_SIZE))*UNIT_SIZE;
            if((mushroomX==appleX&&mushroomY==appleY)||(mushroomX==powerX&&mushroomY==powerY))
                newMushroom();
    }
    public void checkMushroom(){
        if((x[0]==mushroomX)&&(y[0]==mushroomY)){
            score-=10f;
            startTimer-=10f;
            if(score<0)
                score=0;
            newMushroom();
        }
    }
    public void newPower(){
        powerX = random.nextInt((int)(SCREEN_WIDTH/UNIT_SIZE))*UNIT_SIZE;
        powerY = random.nextInt((int)(SCREEN_WIDTH/UNIT_SIZE))*UNIT_SIZE;
    }
    public void checkPower(){
        if((x[0]==powerX)&&(y[0]==powerY)){
            score++;
            bodyParts++;
            startTimer++;
            switch(random.nextInt(4)){
                case 0 : isImmortal=true;  temp1=15; break; //immortal
                case 1 : startTimer+=15; break;
                case 2 : startTimer-=10; score-=10; 
                         if(score<0)
                             score=0;
                         break;
                case 3 : running=true; break;
            }
            timePowerup=random.nextInt(20)+10;
        }
    }
    public void checkCollisions(){
        //checks if head collides with body
        if(!isImmortal){
        for(int i=bodyParts;i>0;i--){
            if((x[0]==x[i])&&(y[0]==y[i])){
                running = false;
            }
        }
        //checks if collides with bot
        for(int i=bodyParts1;i>=0;i--){
            if((x[0]==x1[i])&&(y[0]==y1[i])){
                running = false;
            }
        }
        }
        if(startTimer<=0f){
            running=false;
        }
        
        if(x[0]<0)
            x[0]=SCREEN_WIDTH;
        if(x[0]>SCREEN_WIDTH)
            x[0]=0;
        if(y[0]<0)
            y[0]=SCREEN_HEIGHT;
        if(y[0]>SCREEN_HEIGHT)
            y[0]=0;
        
        if(x1[0]<0)
            x1[0]=SCREEN_WIDTH;
        if(x1[0]>SCREEN_WIDTH)
            x1[0]=0;
        if(y1[0]<0)
            y1[0]=SCREEN_HEIGHT;
        if(y1[0]>SCREEN_HEIGHT)
            y1[0]=0;
        
        if(!running)
            timer.stop();
    }
    public void gameOver(Graphics g){
        //Score
        g.setColor(Color.red);
        g.setFont(new Font("Ink Free",Font.BOLD,40));
        FontMetrics metrics1 = getFontMetrics(g.getFont());
        g.drawString("Score : "+score,(SCREEN_WIDTH-metrics1.stringWidth("Score : "+score))/2,g.getFont().getSize());
        //Game Over text
        g.setColor(Color.red);
        g.setFont(new Font("Ink Free",Font.BOLD,75));
        FontMetrics metrics2 = getFontMetrics(g.getFont());
        g.drawString("Game Over",(SCREEN_WIDTH-metrics2.stringWidth("Game Over"))/2,SCREEN_HEIGHT/2);
    }
    public void actionPerformed(ActionEvent e){
        if(running){
            move();
            if(timeSnake1<0){
                isMoving=true;
                temp=random.nextInt(10)+10;
                timeSnake1=random.nextInt(20)+20+temp;
            }
            move1(isMoving);
            
            if(isMoving)
                temp-=(0.04-count);
            if(temp<0){
                isMoving=false;
                count+=0.001;
                bodyParts1++;
                temp=0;
            }
            
            if(isImmortal){
                temp1-=0.04;
            }
            if(temp1<0){
                isImmortal=false;
                temp1=0;
            }
            
            checkApple();
            checkMushroom();
            checkPower();
            checkCollisions();
            startTimer-=(0.04+count);
            timePowerup-=0.04;
            timeSnake1-=(0.04+count);
        }
        repaint();
    }
    public class MyKeyAdapter extends KeyAdapter{
        public void keyPressed(KeyEvent e){
            switch(e.getKeyCode()){
                case KeyEvent.VK_LEFT : 
                    if(direction != 'R')
                        direction = 'L';
                    break;
                case KeyEvent.VK_RIGHT :
                    if(direction != 'L')
                        direction = 'R';
                    break;
                case KeyEvent.VK_UP :
                    if(direction != 'D')
                        direction = 'U';
                    break;
                case KeyEvent.VK_DOWN :
                    if(direction != 'U')
                        direction = 'D';
                    break;
            }
        }
        
    }
}
